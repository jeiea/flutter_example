// Mocks generated by Mockito 5.0.7 from annotations
// in bug_report/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:_http' as _i2;
import 'dart:async' as _i3;
import 'dart:io' as _i4;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeHttpClientRequest extends _i1.Fake implements _i2.HttpClientRequest {
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(Invocation.getter(#idleTimeout),
          returnValue: _FakeDuration()) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) =>
      super.noSuchMethod(Invocation.setter(#idleTimeout, _idleTimeout),
          returnValueForMissingStub: null);
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
      Invocation.setter(#connectionTimeout, _connectionTimeout),
      returnValueForMissingStub: null);
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
      Invocation.setter(#maxConnectionsPerHost, _maxConnectionsPerHost),
      returnValueForMissingStub: null);
  @override
  bool get autoUncompress => (super
          .noSuchMethod(Invocation.getter(#autoUncompress), returnValue: false)
      as bool);
  @override
  set autoUncompress(bool? _autoUncompress) =>
      super.noSuchMethod(Invocation.setter(#autoUncompress, _autoUncompress),
          returnValueForMissingStub: null);
  @override
  set userAgent(String? _userAgent) =>
      super.noSuchMethod(Invocation.setter(#userAgent, _userAgent),
          returnValueForMissingStub: null);
  @override
  set authenticate(_i3.Future<bool> Function(Uri, String, String)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticate, f),
          returnValueForMissingStub: null);
  @override
  set findProxy(String Function(Uri)? f) =>
      super.noSuchMethod(Invocation.setter(#findProxy, f),
          returnValueForMissingStub: null);
  @override
  set authenticateProxy(
          _i3.Future<bool> Function(String, int, String, String)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticateProxy, f),
          returnValueForMissingStub: null);
  @override
  set badCertificateCallback(
          bool Function(_i4.X509Certificate, String, int)? callback) =>
      super.noSuchMethod(Invocation.setter(#badCertificateCallback, callback),
          returnValueForMissingStub: null);
  @override
  _i3.Future<_i2.HttpClientRequest> open(
          String? method, String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#open, [method, host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(Invocation.method(#openUrl, [method, url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> get(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#get, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> getUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#getUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> post(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#post, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> postUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#postUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> put(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#put, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> putUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#putUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> delete(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#delete, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> deleteUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#deleteUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> patch(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#patch, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> patchUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#patchUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> head(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#head, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  _i3.Future<_i2.HttpClientRequest> headUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#headUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i3.Future<_i2.HttpClientRequest>);
  @override
  void addCredentials(
          Uri? url, String? realm, _i2.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(#addCredentials, [url, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void addProxyCredentials(String? host, int? port, String? realm,
          _i2.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(
              #addProxyCredentials, [host, port, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
}
